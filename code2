from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def dfs_recursive(self, v, visited=None):
        if visited is None:
            visited = set()
        visited.add(v)
        print(v, end=' ')
        for neighbor in self.graph[v]:
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)

    def dfs_iterative(self, start):
        visited, stack = set(), [start]
        while stack:
            v = stack.pop()
            if v not in visited:
                print(v, end=' ')
                visited.add(v)
                stack.extend(reversed(self.graph[v]))

    def dfs_all_components(self):
        visited = set()
        for node in self.graph:
            if node not in visited:
                self.dfs_recursive(node, visited)
                print()

# ---------- Example ----------
g = Graph()
edges = [(0,1), (0,2), (1,3), (2,4), (5,6)]  # 5-6 is a separate component
for u, v in edges:
    g.add_edge(u, v)

print("Recursive DFS from 0:")
g.dfs_recursive(0)
print("\nIterative DFS from 0:")
g.dfs_iterative(0)
print("\nDFS of all components:")
g.dfs_all_components()
