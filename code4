import sys
import heapq

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def add_edge(self, u, v, weight):
        if u >= self.V or v >= self.V:
            print(f"Invalid edge: ({u}, {v}) - Skipped")
            return
        self.graph[u][v] = weight
        self.graph[v][u] = weight

    def display_adjacency_matrix(self):
        print("\nAdjacency Matrix:")
        for row in self.graph:
            print(" ".join(f"{val:3}" for val in row))

    def prim_mst(self):
        visited = [False] * self.V
        min_edge = [sys.maxsize] * self.V
        parent = [-1] * self.V
        min_edge[0] = 0  # Start from vertex 0

        min_heap = [(0, 0)]  # (weight, vertex)

        print("\nStarting Prim's Algorithm...\n")

        while min_heap:
            weight, u = heapq.heappop(min_heap)

            if visited[u]:
                continue

            visited[u] = True
            print(f"Added vertex {u} to MST with edge weight {weight}")

            for v in range(self.V):
                if self.graph[u][v] != 0 and not visited[v] and self.graph[u][v] < min_edge[v]:
                    min_edge[v] = self.graph[u][v]
                    parent[v] = u
                    heapq.heappush(min_heap, (self.graph[u][v], v))
                    print(f"Updated: vertex {v}, new parent {u}, edge weight {self.graph[u][v]}")

        self.print_mst(parent)

    def print_mst(self, parent):
        total_cost = 0
        print("\nMinimum Spanning Tree Edges:")
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(f"{parent[i]} - {i} \t{self.graph[i][parent[i]]}")
            total_cost += self.graph[i][parent[i]]
        print(f"\nTotal cost of MST: {total_cost}")


# ----------------------------
# Input / Usage Section
# ----------------------------

def main():
    print("Prim's Algorithm - Minimum Spanning Tree")
    V = int(input("Enter number of vertices: "))
    E = int(input("Enter number of edges: "))

    g = Graph(V)

    print("Enter each edge in format: u v weight (0-based indexing)")
    for _ in range(E):
        u, v, w = map(int, input("Edge: ").split())
        g.add_edge(u, v, w)

    g.display_adjacency_matrix()
    g.prim_mst()


if __name__ == "__main__":
    main()
